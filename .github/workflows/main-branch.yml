name: 'Main Branch Actions'

on:
  push:
    # Only initiate the workflow when the main branch is pushed to
    branches:
      - main

jobs:
  deploy:
    name: 'Deploy'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up PNPM
        uses: pnpm/action-setup@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build the Next.js site
        run: pnpm build

      - name: Deploy to Netlify (CLI)
        id: deploy
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          set -euo pipefail
          JSON_OUTPUT=$(pnpm exec netlify deploy --build --prod --message "Main Branch Deploy" --json)
          URL=$(echo "$JSON_OUTPUT" | jq -r '.url // .deploy_url // empty')
          if [ -n "$URL" ]; then
            echo "url=$URL" >> $GITHUB_OUTPUT
            echo "Netlify Production URL: $URL" >> $GITHUB_STEP_SUMMARY
          else
            echo "Netlify deploy completed but no URL found in JSON output:" >> $GITHUB_STEP_SUMMARY
            echo "$JSON_OUTPUT" >> $GITHUB_STEP_SUMMARY
          fi
        timeout-minutes: 15

      - name: Create GitHub Deployment (start)
        id: gh_deploy
        uses: actions/github-script@v7
        with:
          script: |
            const res = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'Production',
              description: 'Netlify Production Deploy',
              auto_merge: false,
              required_contexts: [],
              transient_environment: false,
              production_environment: true,
            });
            core.setOutput('deployment_id', res.data.id);

      - name: Set Deployment Status (success)
        if: ${{ success() }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: Number(process.env.DEPLOYMENT_ID),
              state: 'success',
              environment_url: process.env.DEPLOY_URL,
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              auto_inactive: true,
            });
        env:
          DEPLOYMENT_ID: ${{ steps.gh_deploy.outputs.deployment_id }}
          DEPLOY_URL: ${{ steps.deploy.outputs.url }}

      - name: Set Deployment Status (failure)
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: Number(process.env.DEPLOYMENT_ID),
              state: 'error',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              auto_inactive: true,
            });
        env:
          DEPLOYMENT_ID: ${{ steps.gh_deploy.outputs.deployment_id }}
